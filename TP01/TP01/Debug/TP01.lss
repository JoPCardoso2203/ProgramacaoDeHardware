
TP01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000180  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073e  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000632  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f6  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001493  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 00 	call	0x88	; 0x88 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <resolve_operacao>:
 #include <avr/io.h>

 .global resolve_operacao

 resolve_operacao:
	add r24, r22		; v1 = v1 + v2
  80:	86 0f       	add	r24, r22
	add r20, r18
  82:	42 0f       	add	r20, r18
	sub r24, r20
  84:	84 1b       	sub	r24, r20
  86:	08 95       	ret

00000088 <main>:
#include <avr/io.h>

extern char resolve_operacao(char, char, char, char);

main()
{
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	00 d0       	rcall	.+0      	; 0x8e <main+0x6>
  8e:	00 d0       	rcall	.+0      	; 0x90 <main+0x8>
  90:	1f 92       	push	r1
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char v1, v2, v3, v4, v5;
	
    /* Replace with your application code */
    while (1) 
    {
		v1 = 0x37;
  96:	87 e3       	ldi	r24, 0x37	; 55
  98:	89 83       	std	Y+1, r24	; 0x01
		v2 = 45;
  9a:	8d e2       	ldi	r24, 0x2D	; 45
  9c:	8a 83       	std	Y+2, r24	; 0x02
		v3 = 0b00111000;
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	8b 83       	std	Y+3, r24	; 0x03
		v4 = 0x2B;
  a2:	8b e2       	ldi	r24, 0x2B	; 43
  a4:	8c 83       	std	Y+4, r24	; 0x04
		v5 = resolve_operacao(v1,v2,v3,v4);
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	4b 81       	ldd	r20, Y+3	; 0x03
  aa:	6a 81       	ldd	r22, Y+2	; 0x02
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	0e 94 40 00 	call	0x80	; 0x80 <resolve_operacao>
  b2:	8d 83       	std	Y+5, r24	; 0x05
  b4:	f0 cf       	rjmp	.-32     	; 0x96 <main+0xe>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
